C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/20/2019 19:42:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ST7735_TFT
OBJECT MODULE PLACED IN .\Objects\st7735_TFT.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE st7735_TFT.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEX
                    -TEND PRINT(.\Listings\st7735_TFT.lst) TABS(2) OBJECT(.\Objects\st7735_TFT.obj)

line level    source

   1          #include <BasicSet.c>
   2          #define TFT_Width       128
   3          #define TFT_Height      160
   4          
   5          unsigned int xdata Area[20];
   6          unsigned int xdata groundx[20];
   7          unsigned char data trackSquare[6];
   8          unsigned char data tetris[5] = {0x00,0x0c,0x08,0x8,0};       //µÍËÄÎ»´æÐÐÊý¾Ý
   9          
  10          unsigned char square_x = 6, square_y = 9;
  11          
  12          void fillRectangle(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned int color)
             -{
  13   1        if((x >= TFT_Width) || (y >= TFT_Height))
  14   1          return;
  15   1        if((x + w - 1) >= TFT_Width)
  16   1          w = TFT_Width  - x;
  17   1        if((y + h - 1) >= TFT_Height)
  18   1          h = TFT_Height - y;
  19   1        Lcd_SetRegion(x, y, x+w-1, y+h-1);
  20   1        for(y = h; y > 0; y--) {
  21   2          for(x = w; x > 0; x--) {
  22   3            Lcd_WriteData_16(color);
  23   3          }
  24   2        }
  25   1      }
  26          // 8X8 square
  27          void fillPoint(unsigned char x, unsigned char y, unsigned int color ) {
  28   1        unsigned char i;
  29   1        x *= 8;
  30   1        y *= 8;
  31   1        Lcd_SetRegion(x, y, x+7, y+7);
  32   1        for(i = 64; i > 0; i-- )
  33   1          Lcd_WriteData_16(color);
  34   1      }
  35          //ÏÔÊ¾¶íÂÞË¹·½¿é
  36          void print_Tetris(unsigned char x, unsigned char y, unsigned int cube, unsigned int color){
  37   1        unsigned char row, i,bit_row,j;
  38   1        for(i = 0; i < 4; i++){               //4ÐÐ
  39   2          row = cube & 0x0f;                  //È¡³öµÍ4Î»±£´æÔÚrowÖÐ
  40   2          cube >>= 4;
  41   2          bit_row = 0x08;
  42   2          for(j=0; j < 4; j++){
  43   3            if(row & bit_row)                 //°´Î»ÅÐ¶Ï£¬ÏÔÊ¾Ò»ÐÐ
  44   3              fillPoint(x+j,y+3-i,color);     //ÏÈÏÔÊ¾Êý¾ÝµÄµÍ4Î»£¬yÖµ·´¶ø×î´ó
  45   3            bit_row >>= 1;
  46   3          }
  47   2        }
  48   1      }
  49          
  50          //Êý¾Ý´¢´æ½á¹¹£ºÒ»¸ö16Î»intÀàÐÍ´ú±íÒ»ÐÐ
  51          //¸ßÎ»Îª1´ú±í×óÇ½±Ú£¬µÍÈýÎ»ÖÃ1´ú±íÓÒÇ½±Ú
  52          /*  Ç½    1  2  3  4  5  6  7  8  9  10 11   Ç½14
  53              11 |  x  x  x  x  x  x  x  x  x  x  x  | 111      0xc007
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/20/2019 19:42:34 PAGE 2   

  54          */
  55          void trackSquare_Read(unsigned char x, unsigned char y){
  56   1        unsigned int xdata *p = Area;
  57   1        unsigned char i;
  58   1        p += y;           //Êý¾Ý¿ªÊ¼ÐÐ
  59   1        for(i = 0; i < 6; i++){
  60   2          trackSquare[i] = (*p >> (9-x)) & 0x3f; //È¡³ö6Î»Êý¾Ý£¬ÓÒÒÆ 14-6+1-x=9-x
  61   2          p++;
  62   2        }
  63   1      }
  64          
  65          void trackSquare_Write(unsigned char x, unsigned char y){
  66   1        unsigned int xdata *p = Area;
  67   1        unsigned char i;
  68   1        unsigned int a;
  69   1        p += y;
  70   1        for(i = 0; i < 6; i++ ){
  71   2          a = trackSquare[i];
  72   2          a <<= (9-x);
  73   2          *p = a;
  74   2          p++;
  75   2        }
  76   1      
  77   1      }
  78          void tetris_Storage(unsigned char x, unsigned char y, unsigned char *p){
  79   1        unsigned int xdata *pgroundx = groundx;
  80   1        unsigned char i;
  81   1        unsigned int a;
  82   1        pgroundx += (y);
  83   1        for(i = 0; i < 6; i++ ){
  84   2          a = *p & 0x3f;                   //ÆÁ±Î¸ßÁ½Î»
  85   2          a <<= (9-x);
  86   2          *pgroundx |= a;                  //Ð´ÈëÉÏÒ»´ÎtracksquareÖÐµÄÊý¾Ý
  87   2          p++;
  88   2          pgroundx++;
  89   2        }
  90   1        a = 0x8000;
  91   1        for(i = 0; i < 16;i++){
  92   2          if(groundx[16] & a)
  93   2            fillPoint(i, 0, RED);
  94   2          a >>= 1;
  95   2        }
  96   1      
  97   1      }
  98          
  99          //Show trackSquare
 100          unsigned char showTrackSquare_Down(unsigned char x, unsigned char y, unsigned char direction){
 101   1        signed char i,j;
 102   1        unsigned char data temptrack[6],aa[6];
 103   1        unsigned char data *pTrack =trackSquare;
 104   1        unsigned char data *pTemp = temptrack;
 105   1        unsigned char row;
 106   1        for(i = 0; i < 6; i++)
 107   1          temptrack[i] = *pTrack++;
 108   1      
 109   1        for(i = 0; i < 6; i++)
 110   1          trackSquare[i] = groundx[y+i] >> (9-x) & 0x3f; //±³¾°Êý¾ÝÐ´Èëtracksquare
 111   1      
 112   1        if(direction == 0)                               //ÏÂ½µ
 113   1          for(i = 0; i < 4; i++){
 114   2            row = tetris[i] << 1;
 115   2            if(tetris[i+1] & trackSquare[4-i] >> 1){    //tracksquare µÍ6Î»ÖÐ¼ä4Î»±£´æÊý¾Ý£¬¶øteterisµÍËÄÎ»±£´æÊ
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/20/2019 19:42:34 PAGE 3   

             -ý¾Ý£¬ ÓÒÒÆÒ»Î»
 116   3              tetris_Storage(x,y,temptrack);
 117   3              square_y = 8;
 118   3              square_x = 3;
 119   3              return 1;
 120   3            }
 121   2            trackSquare[5-i] |= row;             //trackÇøÓòÓë¶íÂÞË¹·½¿éÏà»ò,±£´æÕâ´ÎÒÆ¶¯²Ù×÷µÄÊý¾Ý
 122   2          }
 123   1        else
 124   1          if(direction == 1)                             //×óÒÆ
 125   1            for(i = 0; i < 4; i++){
 126   2              row = tetris[i] << 2;
 127   2              if(tetris[i] & trackSquare[4-i] >> 2)
 128   2                return 1;
 129   2              trackSquare[5-i] |= row;
 130   2            }
 131   1          else
 132   1            if(direction == 2)                          //ÓÒÒÆ
 133   1              for(i = 0; i < 4; i++){
 134   2                row = tetris[i];
 135   2                if(tetris[i+1] & trackSquare[4-i] >> 1)
 136   2                  return 1;
 137   2                trackSquare[5-i] |= row;
 138   2              }
 139   1            else
 140   1              return 1;
 141   1        pTemp = &temptrack[0];
 142   1        pTrack = trackSquare;
 143   1        for(i = 0; i < 6; i++){
 144   2          aa[i] = *pTrack ^ *pTemp;
 145   2          pTrack++;
 146   2          pTemp++;                            //Òì»òµÃµ½¸Ä±äÎ»´æÈëaa
 147   2        }
 148   1        if(aa[1] == 0x20)
 149   1        fillPoint(2,2,RED);
 150   1        for(i = 0; i < 6; i++){                 //ÖðÐÐÉ¨Ãè
 151   2          if(aa[i]){                           //Òì»òÖµÎªÕæ£¬¸Ä±äÑÕÉ«
 152   3            row = 0x20;
 153   3            for(j = 0; j < 6; j++){             //ÐÐÄÚÉ¨Ãè
 154   4              if(aa[i] & row ){                 //°´Î»ÅÐ¶Ï
 155   5                if(temptrack[i] & row)        //Ô­À´µÄÖµÎªÕæ£¬¸Ä³É±³¾°É«£¨ºÚÉ«£©£¬·ñÔòÌî³äÑÕÉ«
 156   5                  fillPoint(x+j+1,y+i,BLACK);
 157   5                else
 158   5                  fillPoint(x+j+1,y+i,RED);
 159   5              }
 160   4              row >>= 1;
 161   4            }
 162   3          }
 163   2        }
 164   1        return 0;
 165   1      }
 166          
 167          
 168          //ÓÎÏ·½çÃæ12X20£¬ÓÃÒ»¸ö16Î»Êý¾Ý±£´æÒ»ÐÐ£¬¸ß4Î»ÎÞÐ§£¬¹²20ÐÐ£¬20¸öÊý¾Ý
 169          
 170          
 171          void main(void)
 172          {
 173   1        unsigned char i;
 174   1        for(i = 0; i < 20; i++){
 175   2          groundx[i] = 0xc000;
 176   2          Area[i]=0xc000;
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/20/2019 19:42:34 PAGE 4   

 177   2        }
 178   1      
 179   1      
 180   1        groundx[18] = 0x0f7f;
 181   1        Area[18] = 0x0f7f;
 182   1        //Area[19] = 0xffff;
 183   1        lcd_initial(); //Òº¾§ÆÁ³õÊ¼»¯
 184   1        bl=1;//±³¹â²ÉÓÃIO¿ØÖÆ£¬Ò²¿ÉÒÔÖ±½Ó½Óµ½¸ßµçÆ½³£ÁÁ
 185   1        //LCD_Clear(BLACK);   //ºÚÉ«
 186   1      
 187   1        //print_Tetris(square_x+1,6,0x88c0,YELLOW);
 188   1        delay(500);
 189   1        while(1){
 190   2          trackSquare_Read(square_x,square_y);
 191   2          if(!showTrackSquare_Down(square_x, square_y, 1 )){
 192   3            trackSquare_Write(square_x,square_y);
 193   3          }
 194   2          else{
 195   3            for(i = 0; i < 20; i++)
 196   3              Area[i]=groundx[i];
 197   3          }
 198   2          square_x--;
 199   2          delay(500);
 200   2        }
 201   1        while(1)
 202   1        {
 203   2        delay(500);
 204   2         }
 205   1      
 206   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2141    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     80    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      60
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
