C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/22/2019 13:47:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ST7735_TFT
OBJECT MODULE PLACED IN .\Objects\st7735_TFT.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil_v5\C51\BIN\C51.EXE st7735_TFT.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEX
                    -TEND PRINT(.\Listings\st7735_TFT.lst) TABS(2) OBJECT(.\Objects\st7735_TFT.obj)

line level    source

   1          #include <BasicSet.c>
   2          #define TFT_Width       128
   3          #define TFT_Height      160
   4          
   5          unsigned int xdata Area[20];
   6          unsigned int xdata groundx[20];
   7          unsigned char data trackSquare[6];
   8          unsigned char data tetris[5] = {0x00,0x06,0x04,0x04,0};       //µÍËÄÎ»´æÐÐÊý¾Ý
   9          unsigned char count = 1, Down_Flag = 0, Move_flag = 0;
  10          unsigned char square_x = 6, square_y = 0, rotate = 0;
  11          unsigned int code tetrisData[6][4] = {
  12            {0x0c88,0x08e0,0x0226,0x0e20},
  13            {0x06c0,0x08c4,0x06c0,0x08c4},
  14            {0x0c60,0x04c8,0x0c60,0x04c8},
  15            {0x088c,0x02e0,0x0622,0x0e80},
  16            {0x0e40,0x0464,0x04e0,0x04c4},
  17            {0x0660,0x0660,0x0660,0x0660}
  18          };
  19          unsigned int code *pTetris = tetrisData[0];
  20          unsigned int code *PTimer;
  21          unsigned char tcount = 0;
  22          sbit Left = P1^3;
  23          sbit Right = P1^2;
  24          sbit Rota = P1^1;
  25          sbit fast = P1^0;
  26          void fillRectangle(unsigned char x, unsigned char y, unsigned char w, unsigned char h, unsigned int color)
             -{
  27   1        if((x >= TFT_Width) || (y >= TFT_Height))
  28   1          return;
  29   1        if((x + w - 1) >= TFT_Width)
  30   1          w = TFT_Width  - x;
  31   1        if((y + h - 1) >= TFT_Height)
  32   1          h = TFT_Height - y;
  33   1        Lcd_SetRegion(x, y, x+w-1, y+h-1);
  34   1        for(y = h; y > 0; y--) {
  35   2          for(x = w; x > 0; x--) {
  36   3            Lcd_WriteData_16(color);
  37   3          }
  38   2        }
  39   1      }
  40          // 8X8 square
  41          void fillPoint(unsigned char x, unsigned char y, unsigned int color ) {
  42   1        unsigned char i;
  43   1        x *= 8;
  44   1        y *= 8;
  45   1        Lcd_SetRegion(x, y, x+7, y+7);
  46   1        for(i = 64; i > 0; i-- )
  47   1          Lcd_WriteData_16(color);
  48   1      }
  49          
  50          //Êý¾Ý´¢´æ½á¹¹£ºÒ»¸ö16Î»intÀàÐÍ´ú±íÒ»ÐÐ
  51          //¸ßÎ»Îª1´ú±í×óÇ½±Ú£¬µÍÈýÎ»ÖÃ1´ú±íÓÒÇ½±Ú
  52          /*  Ç½    1  2  3  4  5  6  7  8  9  10 11   Ç½14
  53              11 |  x  x  x  x  x  x  x  x  x  x  x  | 111      0xc007
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/22/2019 13:47:36 PAGE 2   

  54          */
  55          void trackSquare_Read(unsigned char x, unsigned char y){
  56   1        unsigned int xdata *p = Area;
  57   1        unsigned char i;
  58   1        p += y;           //Êý¾Ý¿ªÊ¼ÐÐ
  59   1        for(i = 0; i < 6; i++){
  60   2          trackSquare[i] = (*p >> (9-x)); //È¡³ö6Î»Êý¾Ý£¬ÓÒÒÆ 14-6+1-x=9-x
  61   2          p++;
  62   2        }
  63   1      }
  64          
  65          void trackSquare_Write(unsigned char x, unsigned char y){
  66   1        unsigned int xdata *p = Area;
  67   1        unsigned char i;
  68   1        unsigned int a, and = 0x003f;         //  µÍÁùÎ»ÖÃ1
  69   1        p += y;
  70   1        and <<= (9-x);                        //×óÒÆ¶ÔÎ»
  71   1        for(i = 0; i < 6; i++ ){
  72   2          a = trackSquare[i] << (9-x);
  73   2          *p &= ~and;                         //È¡·´ÏàÓë£¬Çå¿ÕAreaÖÐµÄtracksquareÇøÓò
  74   2          *p |= a;                            //Óë ÐÂµÄÊý¾Ý
  75   2          p++;
  76   2        }
  77   1      
  78   1      }
  79          void tetris_Storage(unsigned char x, unsigned char y, unsigned char *p){
  80   1        unsigned int xdata *pgroundx = groundx;
  81   1        unsigned char i;
  82   1        unsigned int a;
  83   1        pgroundx += (y);
  84   1        for(i = 0; i < 6; i++ ){
  85   2          a = *p & 0x3f;                   //ÆÁ±Î¸ßÁ½Î»
  86   2          a <<= (9-x);
  87   2          *pgroundx |= a;                  //Ð´ÈëÉÏÒ»´ÎtracksquareÖÐµÄÊý¾Ý
  88   2          p++;
  89   2          pgroundx++;
  90   2        }
  91   1      /*  a = 0x8000;                     //debug
  92   1        for(i = 0; i < 16;i++){
  93   1          if(groundx[16] & a)
  94   1            fillPoint(i, 0, RED);
  95   1          a >>= 1;
  96   1        }
  97   1      */
  98   1      }
  99          
 100          //Show trackSquare
 101          unsigned char showTrackSquare_Down(unsigned char x, unsigned char y, unsigned char direction){
 102   1        signed char i,j;
 103   1        unsigned char data temptrack[6],aa[6];
 104   1        unsigned char data *pTrack =trackSquare;
 105   1        unsigned char data *pTemp = temptrack;
 106   1        unsigned char row;
 107   1        unsigned int  row_int;
 108   1        for(i = 0; i < 6; i++)
 109   1          temptrack[i] = *pTrack++; //ÉÏ´Î¼ÇÂ¼Êý¾ÝÔÝ´æ
 110   1      
 111   1        for(i = 0; i < 6; i++)
 112   1          trackSquare[i] = groundx[y+i] >> (9-x) & 0x3f; //±³¾°Êý¾ÝÐ´Èëtracksquare
 113   1      
 114   1        if(direction == 0)                               //ÏÂ½µ
 115   1          for(i = 0; i < 4; i++){
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/22/2019 13:47:36 PAGE 3   

 116   2            row = tetris[i] << 1;
 117   2            if(tetris[i+1] & trackSquare[4-i] >> 1){    //tracksquare µÍ6Î»ÖÐ¼ä4Î»±£´æÊý¾Ý£¬¶øteterisµÍËÄÎ»±£´æÊ
             -ý¾Ý£¬ ÓÒÒÆÒ»Î»
 118   3              tetris_Storage(x,y,temptrack);            //ÅÐ¶ÏÊÇ·ñ´¥µ×£¬TetrisµÚ1ÐÐÓëtracksquareµÚ4ÐÐ¶ÔÎ»ÅÐ¶Ï
 119   3              square_y = 0;     //³õÊ¼»¯y×ø±ê
 120   3              square_x = 3;     //³õÊ¼»¯x×ø±ê
 121   3              pTetris = PTimer; //¶¨Ê±Æ÷Ëæ»úÖ¸Õë¸³Öµ¸øpTetris
 122   3              row_int = *pTetris;
 123   3              for(i = 0; i < 4; i++){
 124   4                tetris[3-i] = row_int & 0x0f;            //ÆÁ±Î¸ßÎ»£¬½«Êý¾ÝÐ´Èëtetris
 125   4                row_int >>= 4;
 126   4              }
 127   3              return 1;
 128   3            }
 129   2            trackSquare[5-i] |= row;                     //trackÇøÓòÓë¶íÂÞË¹·½¿éÏà»ò,±£´æÕâ´ÎÒÆ¶¯²Ù×÷µÄÊý¾Ý
 130   2          }
 131   1        else
 132   1          if(direction == 1)                             //×óÒÆ
 133   1            for(i = 0; i < 4; i++){
 134   2              row = tetris[i] << 2;
 135   2              if(tetris[i] & trackSquare[4-i] >> 2)
 136   2                return 1;
 137   2              trackSquare[4-i] |= row;
 138   2            }
 139   1          else
 140   1            if(direction == 2)                           //ÓÒÒÆ
 141   1              for(i = 0; i < 4; i++){
 142   2                row = tetris[i];
 143   2                if(tetris[i] & trackSquare[4-i])
 144   2                  return 1;
 145   2                trackSquare[4-i] |= row;
 146   2              }
 147   1            else
 148   1              if(direction == 3){                        //Ðý×ª
 149   2                row_int = *(pTetris + rotate);
 150   2                rotate++;
 151   2                if(rotate > 3)
 152   2                  rotate = 0;
 153   2                for(i = 0; i < 4; i++){
 154   3                  tetris[3-i] = row_int & 0x0f;          //ÆÁ±Î¸ßÎ»£¬½«Êý¾ÝÐ´Èëtetris
 155   3                  row_int >>= 4;
 156   3                }
 157   2                for(i = 0; i < 4; i++){
 158   3                  row = tetris[i] << 1;
 159   3                  if(tetris[i] & trackSquare[4-i] >> 1){   //ÅÐ¶ÏÊÇ·ñ¿ÉÒÔÐý×ª£¬¶ÔÓ¦ÐÐÏàÓë
 160   4                    rotate--;
 161   4                    row_int = *(pTetris + rotate);
 162   4                    for(i = 0; i < 4; i++){
 163   5                      tetris[3-i] = row_int & 0x0f;        //ÓëÖµÎªÕæ·µ»ØÇ°Ò»´ÎµÄÊý¾Ý
 164   5                      row_int >>= 4;
 165   5                    }
 166   4                    return 1;
 167   4                  }
 168   3                  trackSquare[4-i] |= row;
 169   3                }
 170   2              }
 171   1              else
 172   1                return 1;
 173   1        pTemp = &temptrack[0];
 174   1        pTrack = trackSquare;
 175   1        for(i = 0; i < 6; i++){
 176   2          aa[i] = *pTrack ^ *pTemp;
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/22/2019 13:47:36 PAGE 4   

 177   2          pTrack++;
 178   2          pTemp++;                            //Òì»òµÃµ½¸Ä±äÎ»´æÈëaa
 179   2        }
 180   1      
 181   1        for(i = 0; i < 6; i++){                 //ÖðÐÐÉ¨Ãè
 182   2          if(aa[i]){                           //Òì»òÖµÎªÕæ£¬¸Ä±äÑÕÉ«
 183   3            row = 0x20;
 184   3            for(j = 0; j < 6; j++){             //ÐÐÄÚÉ¨Ãè
 185   4              if(aa[i] & row ){                 //°´Î»ÅÐ¶Ï
 186   5                if(temptrack[i] & row)        //Ô­À´µÄÖµÎªÕæ£¬¸Ä³É±³¾°É«£¨ºÚÉ«£©£¬·ñÔòÌî³äÑÕÉ«
 187   5                  fillPoint(x+j+1,y+i,BLACK);
 188   5                else
 189   5                  fillPoint(x+j+1,y+i,RED);
 190   5              }
 191   4              row >>= 1;
 192   4            }
 193   3          }
 194   2        }
 195   1        return 0;
 196   1      }
 197          
 198          
 199          //ÓÎÏ·½çÃæ12X20£¬ÓÃÒ»¸ö16Î»Êý¾Ý±£´æÒ»ÐÐ£¬¸ß4Î»ÎÞÐ§£¬¹²20ÐÐ£¬20¸öÊý¾Ý
 200          
 201          
 202          void main(void)
 203          {
 204   1        unsigned char i;
 205   1        PT0 = 1;
 206   1        TMOD = 0x11;
 207   1        TH0 = 0x3C;
 208   1        TL0 = 0xB0;
 209   1        TH1 = 0xa6;
 210   1        TL1 = 0x28;
 211   1        EA = 1;
 212   1        ET0 = 1;
 213   1        ET1 = 1;
 214   1        TR0 = 1;                  //´ò¿ª¶¨Ê±Æ÷0£¬¶¨Ê±50ms
 215   1        TR1 = 1;                  //´ò¿ªT0£¬¶¨Ê±23ms
 216   1        P1 = 0x0f;                //¾ØÕó¼üÅÌ½ÓP1¿Ú£¬¸³³õÖµ
 217   1        for(i = 0; i < 20; i++){  //×óÓÒ±ß½ç
 218   2          groundx[i] = 0xc007;
 219   2          Area[i]=0xc007;
 220   2        }
 221   1        groundx[19] = 0xffff;     //ÏÂ±ß½ç
 222   1        Area[19] = 0xffff;
 223   1      
 224   1        lcd_initial();            //Òº¾§ÆÁ³õÊ¼»¯
 225   1        bl=1;                     //±³¹â²ÉÓÃIO¿ØÖÆ£¬Ò²¿ÉÒÔÖ±½Ó½Óµ½¸ßµçÆ½³£ÁÁ
 226   1        //LCD_Clear(BLACK);       //ºÚÉ«
 227   1      
 228   1        delay(500);
 229   1        trackSquare_Read(square_x,square_y);
 230   1      
 231   1        while(1)
 232   1        {
 233   2          if(Down_Flag){                                      //downflag¶¨Ê±Æ÷T0¼ÆÊ±1.5s´¥·¢ÖÃÎ»£¬·½¿éÏÂ½µ
 234   3            trackSquare_Read(square_x,square_y);              //¶ÁÈ¡×·×ÙÇøÓòÊý¾Ýµ½Tracksquare
 235   3            if(!showTrackSquare_Down(square_x, square_y, 0)){ //ÅÐ¶ÏÊÇ·ñ´¥µ×£¬´¥µ×Ôò²»Ð´Èë×·×ÙÊý¾Ý£¬ÓÉ¸Ãº¯Êý½«Êý
             -¾ÝÐ´Èë±³¾°ÇøÓò
 236   4              trackSquare_Write(square_x,square_y);           //Ã»ÓÐ´¥µ×£¬TracksquareÊý¾ÝÐ´Èë×·×ÙÇøÓò
 237   4              square_y++;                   //ÏÂÒÆÒ»¸ñ
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/22/2019 13:47:36 PAGE 5   

 238   4            }
 239   3            else{
 240   4              for(i = 0; i < 20; i++)
 241   4              Area[i]=groundx[i];         //Í¬²½Êý¾Ý
 242   4            }
 243   3            Down_Flag = 0;                //Çå³ýÏÂ½µ±êÖ¾
 244   3          }
 245   2          if(!Left && Move_flag){         //×óÒÆÅÐ¶Ï£¬Í¬Ê±ÅÐ¶ÏÊÇ·ñÔÊÐíÒÆ¶¯²Ù×÷£¬moveflagÓÉT0¿ØÖÆ
 246   3            delay(20);
 247   3            if(!Left){                    //ÑÓÊ±Ïû¶¶£¬ÔÙ´ÎÅÐ¶Ï
 248   4              trackSquare_Read(square_x,square_y);
 249   4              if(!showTrackSquare_Down(square_x, square_y, 1)){
 250   5                trackSquare_Write(square_x,square_y);
 251   5                square_x--;
 252   5              }
 253   4            }
 254   3          }
 255   2          if(!Right && Move_flag){        //ÓÒÒÆÅÐ¶Ï
 256   3            delay(20);
 257   3            if(!Right){
 258   4              trackSquare_Read(square_x,square_y);
 259   4              if(!showTrackSquare_Down(square_x, square_y, 2)){
 260   5                trackSquare_Write(square_x,square_y);
 261   5                square_x++;
 262   5              }
 263   4            }
 264   3          }
 265   2          if(!Rota && Move_flag){        //Ðý×ªÅÐ¶Ï
 266   3            delay(20);
 267   3            if(!Rota){
 268   4              trackSquare_Read(square_x,square_y);
 269   4              if(!showTrackSquare_Down(square_x, square_y, 3))
 270   4                trackSquare_Write(square_x,square_y);
 271   4            }
 272   3          }
 273   2          if(!fast){                    //¼ÓËÙÏÂ½µ
 274   3            delay(20);
 275   3            if(!fast)
 276   3              Down_Flag = 1;
 277   3          }
 278   2        }
 279   1      
 280   1      }
 281          
 282          void Timer0() interrupt 1
 283          {
 284   1        TH0 = 0x3C;
 285   1        TL0 = 0xB0;                //¶¨Ê±50ms
 286   1        count++;
 287   1        if(count <= 22)           //Ç°22*50=1.1s¿ÉÒÔ½øÐÐ×óÓÒÒÆ¶¯²Ù×÷
 288   1          Move_flag = 1;
 289   1        else
 290   1          Move_flag = 0;
 291   1      
 292   1        if(count >= 30){          //¶¨Ê±1.5s
 293   2          count = 0;
 294   2          Down_Flag = 1;
 295   2        }
 296   1      }
 297          
 298          void Timer1() interrupt 3
 299          {
C51 COMPILER V9.59.0.0   ST7735_TFT                                                        04/22/2019 13:47:36 PAGE 6   

 300   1        TH1 = 0xa6;
 301   1        TL1 = 0x28;
 302   1        if(tcount > 5)
 303   1          tcount = 0;
 304   1        PTimer = tetrisData[tcount];
 305   1        tcount++;
 306   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2646    ----
   CONSTANT SIZE    =     48    ----
   XDATA SIZE       =     80    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     22      56
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
